{
  "schemaName": "gw.core.cc.claim.v1.claim_core-1.0",
  "combine": [
    "gw.core.cc.common.v1.common_core-1.0"
  ],
  "typeUses": [
    "com.guidewire.cc.domain.financials.rest.CheckSetRestMethods",
    "com.guidewire.cc.domain.financials.rest.RecoveryReserveSetRestMethods",
    "com.guidewire.cc.domain.financials.rest.RecoverySetRestMethods",
    "com.guidewire.cc.domain.financials.rest.ReserveSetRestMethods",
    "com.guidewire.cc.domain.financials.rest.TransactionLineItemRestMethods",
    "com.guidewire.pl.modules.rest.framework.v1.refs.SemiSharedPropertyUpdateHandler",
    "com.guidewire.pl.modules.rest.framework.v1.updater.validators.ExplicitlyFilteredTypekeyPostUpdateValidator",
    "gw.api.modules.rest.framework.v1.updater.resolver.CurrencyAmountValueResolver",
    "gw.rest.core.cc.claim.v1.autopilot.RelatedEntityJsonValueResolver",
    "gw.rest.core.cc.claim.v1.claims.refs.PolicyObjectSemiSharedPropertyUpdateHandler",
    "gw.rest.core.pl.common.v1.phone.PhoneNumberResolver",
    "gw.rest.core.cc.claim.v1.claims.CoverageJsonValueResolver",
    "gw.rest.core.cc.claim.v1.claims.ClaimAddressJsonValueResolver",
    "gw.rest.core.cc.claim.v1.claims.addresses.ClaimAddress",
    "gw.rest.core.cc.claim.v1.claims.contacts.ClaimContactJsonValueResolver",
    "gw.rest.core.cc.common.v1.contacts.ClaimContactRoleKey",
    "gw.rest.core.cc.common.v1.relatedto.RelatedToJsonValueResolver",
    "gw.rest.core.cc.claim.v1.servicerequests.ServiceRequestKindPreUpdateValidator"
  ],
  "updaters": {
    "AssessmentContentItem": {
      "schemaDefinition": "AssessmentContentItem",
      "root": "entity.AssessmentContentItem",
      "properties": {
        "amountAfterLimit": {
          "path": "AssessmentContentItem.AmountAfterLimit",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "contentCategory": {
          "path": "AssessmentContentItem.ContentCategory",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "contentSchedule": {
          "path": "AssessmentContentItem.ContentSchedule",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "dateAcquired": {
          "path": "AssessmentContentItem.DateAcquired",
          "postUpdateValidators": [
            {
              "typeName": "gw.rest.core.cc.claim.v1.claims.assessmentcontentitem.AssessmentContentItemValidator"
            }
          ]
        },
        "depreciationPercentage": {
          "path": "AssessmentContentItem.DepreciationPercentage"
        },
        "description": {
          "path": "AssessmentContentItem.Description"
        },
        "incidentOrder": {
          "path": "AssessmentContentItem.IncidentOrder"
        },
        "itemComment": {
          "path": "AssessmentContentItem.ItemComment"
        },
        "numberOfItems": {
          "path": "AssessmentContentItem.NumberOfItems"
        },
        "purchaseCost": {
          "path": "AssessmentContentItem.PurchaseCost",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "replacementValue": {
          "path": "AssessmentContentItem.ReplacementValue",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        }
      }
    },
    "AssessmentSummary": {
      "schemaDefinition": "AssessmentSummary",
      "root": "entity.AssessmentSummary",
      "properties": {
        "category": {
          "path": "AssessmentSummary.Category"
        },
        "exposure": {
          "path": "AssessmentSummary.Exposure",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.exposures.ExposureJsonValueResolver"
          }
        },
        "normalizedScore": {
          "path": "AssessmentSummary.NormalizedScore"
        },
        "rawAssessmentReferenceId": {
          "path": "AssessmentSummary.RawAssessmentReferenceID"
        },
        "recommendedActionCode": {
          "path": "AssessmentSummary.RecommendedActionCode"
        },
        "recommendedActionDescription": {
          "path": "AssessmentSummary.RecommendedActionDescription"
        },
        "score": {
          "path": "AssessmentSummary.Score"
        },
        "scoreDate": {
          "path": "AssessmentSummary.ScoreDate"
        },
        "scorePercentile": {
          "path": "AssessmentSummary.ScorePercentile"
        },
        "tapId": {
          "path": "AssessmentSummary.TapID"
        },
        "tapSubtypeId": {
          "path": "AssessmentSummary.TapSubtypeID"
        }
      }
    },
    "Check": {
      "schemaDefinition": "Check",
      "root": "entity.Check",
      "validatorFactories": [
        "com.guidewire.cc.domain.financials.rest.CheckValidatorFactory"
      ],
      "properties": {
        "bankAccount": {
          "path": "Check.BankAccount",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "checkBatching": {
          "path": "Check.CheckBatching",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "checkInstructions": {
          "path": "Check.CheckInstructions",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "checkNumber": {
          "path": "Check.CheckNumber"
        },
        "claimContact": {
          "path": "Check.ClaimContact",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.contacts.ClaimContactJsonValueResolver"
          }
        },
        "comments": {
          "path": "Check.Comments"
        },
        "dateOfService": {
          "path": "Check.DateOfService"
        },
        "deductionType": {
          "path": "Check.DeductionType",
          "allowed": "CheckSetRestMethods.allowPropertyForCheck(Check, CheckType.TC_SECONDARY, 'deductionType')",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "deliveryMethod": {
          "path": "Check.DeliveryMethod",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "enteredTime": {
          "path": "Check.EnteredTime"
        },
        "invoiceNumber": {
          "path": "Check.InvoiceNumber"
        },
        "issueDate": {
          "path": "Check.IssueDate"
        },
        "mailTo": {
          "path": "Check.MailTo"
        },
        "mailingAddress": {
          "path": "Check.MailingAddress",
          "create": "new Address(Check)",
          "updaterRef": "#/updaters/Address"
        },
        "memo": {
          "path": "Check.Memo"
        },
        "payTo": {
          "path": "Check.PayTo"
        },
        "payees": {
          "path": "Check.Payees",
          "items": {
            "create": "Check.addNewPayee()",
            "validateCreate": "jsonValue.containsKey('id') ? 'The id ' + jsonValue.get('id') + ' did not match any existing payee' : null",
            "remove": "Check.removeFromPayees(value)",
            "jsonKey": "jsonValue.get('id')",
            "valueKey": "value.RestId",
            "updaterRef": "#/updaters/Payee"
          }
        },
        "paymentMethod": {
          "path": "Check.PaymentMethod",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "paymentsToWrite": {
          "path": "Check.Payments",
          "allowed": "CheckSetRestMethods.allowPropertyForCheck(Check, CheckType.TC_PRIMARY, 'paymentsToWrite')",
          "items": {
            "create": "Check.addNewPayment()",
            "validateCreate": "jsonValue.containsKey('id') ? 'The id ' + jsonValue.get('id') + ' did not match any existing payment' : null",
            "jsonKey": "jsonValue.get('id')",
            "valueKey": "value.RestId",
            "updaterRef": "#/updaters/Transaction"
          },
          "postUpdateValidators": [
            {
              "typeName": "com.guidewire.cc.domain.financials.rest.CheckMultiCurrencyValidator"
            }
          ]
        },
        "portion": {
          "path": "Check.Portion",
          "allowed": "CheckSetRestMethods.allowPropertyForCheck(Check, CheckType.TC_SECONDARY, 'portion')",
          "create": "new CheckPortion(Check)",
          "updaterRef": "#/updaters/CheckPortion"
        },
        "reportability": {
          "path": "Check.Reportability",
          "allowed": "CheckSetRestMethods.allowPropertyForCheck(Check, CheckType.TC_PRIMARY, 'reportability')",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "scheduledSendDate": {
          "path": "Check.ScheduledSendDate",
          "valueResolver": {
            "typeName": "gw.rest.pl.framework.v1.updater.resolver.LocalDateValueResolver"
          }
        },
        "servicePdEnd": {
          "path": "Check.ServicePdEnd"
        },
        "servicePdStart": {
          "path": "Check.ServicePdStart"
        }
      }
    },
    "CheckPortion": {
      "schemaDefinition": "CheckPortion",
      "root": "entity.CheckPortion",
      "updateFirst": [
        "fixedAmount",
        "percentage"
      ],
      "properties": {
        "fixedAmount": {
          "path": "CheckPortion.FixedTransactionAmount",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "percentage": {
          "path": "CheckPortion.Percentage",
          "allowed": "CheckSetRestMethods.allowPercentagePropertyForCheckPortion(CheckPortion)"
        }
      }
    },
    "CheckRecurrence": {
      "schemaDefinition": "CheckRecurrence",
      "root": "entity.CheckRecurrence",
      "properties": {
        "firstDueDate": {
          "path": "CheckRecurrence.FirstDueDate"
        },
        "issuanceDateOffset": {
          "path": "CheckRecurrence.IssuanceDateOffset"
        },
        "monthlyFrequency": {
          "path": "(CheckRecurrence as MonthlyCheckRecurrence).MonthlyFrequency"
        },
        "numChecks": {
          "path": "CheckRecurrence.NumChecks"
        },
        "recurrenceDate": {
          "path": "(CheckRecurrence as MonthlyCheckRecurrence).RecurrenceDate"
        },
        "recurrenceDay": {
          "path": "CheckRecurrence.RecurrenceDay",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "recurrenceWeek": {
          "path": "(CheckRecurrence as MonthlyCheckRecurrence).RecurrenceWeek",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "weeklyFrequency": {
          "path": "(CheckRecurrence as WeeklyCheckRecurrence).WeeklyFrequency"
        }
      }
    },
    "CheckSet": {
      "schemaDefinition": "CheckSet",
      "root": "entity.CheckSet",
      "updateFirst": [
        "primaryCheckToWrite",
        "secondaryChecksToWrite"
      ],
      "properties": {
        "primaryCheckToWrite": {
          "path": "CheckSet.PrimaryCheck",
          "setter": "",
          "create": "CheckSetRestMethods.createNewPrimaryCheck(CheckSet, jsonValue)",
          "shouldCreate": "CheckSet.PrimaryCheck == null",
          "updaterRef": "#/updaters/Check"
        },
        "recurrence": {
          "path": "CheckSet.Recurrence",
          "create": "CheckSetRestMethods.createNewRecurrence(CheckSet, jsonValue)",
          "shouldCreate": "CheckSetRestMethods.shouldCreateRecurrence(CheckSet, jsonValue)",
          "updaterRef": "#/updaters/CheckRecurrence"
        },
        "secondaryChecksToWrite": {
          "path": "CheckSetRestMethods.getSecondaryChecks(CheckSet)",
          "items": {
            "create": "CheckSetRestMethods.createSecondaryCheck(CheckSet)",
            "remove": "CheckSetRestMethods.removeSecondaryCheck(value)",
            "jsonKey": "jsonValue.get('id')",
            "valueKey": "value.RestId",
            "updaterRef": "#/updaters/Check"
          }
        }
      }
    },
    "Claim": {
      "schemaDefinition": "Claim",
      "root": "entity.Claim",
      "properties": {
        "coverageInQuestion": {
          "path": "Claim.CoverageInQuestion"
        },
        "description": {
          "path": "Claim.Description"
        },
        "faultRating": {
          "path": "Claim.FaultRating",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "filterPropertyRiskUnits": {
          "ignore": "true"
        },
        "filterVehicleRiskUnits": {
          //Handled during creation
          "ignore": "true"
        },
        "flagged": {
          "path": "Claim.Flagged",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "howReported": {
          "path": "Claim.HowReported",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "incidentOnly": {
          "path": "Claim.IncidentReport"
        },
        "jurisdiction": {
          "path": "Claim.JurisdictionState",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "lobCode": {
          // Handled during creation
          "ignore": "true"
        },
        "lossCause": {
          "path": "Claim.LossCause",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "lossDate": {
          // Handled during creation
          "ignore": "true"
        },
        "lossLocation": {
          "path": "Claim.RestV1.LossLocationWrapper",
          "create": "new ClaimAddress(new Address(Claim), Claim)",
          "handler": "SemiSharedPropertyUpdateHandler",
          "valueResolver": {
            "typeName": "ClaimAddressJsonValueResolver"
          },
          "shouldCreate": "currentValue == null || currentValue.PolicyAddress",
          "touchParent": "currentValue.Address.Changed",
          "updaterRef": "#/updaters/ClaimAddress"
        },
        "policyNumber": {
          // Handled during creation
          "ignore": "true"
        },
        "reportedByType": {
          "path": "Claim.ReportedByType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "ClaimAddress": {
      "schemaDefinition": "ClaimAddress",
      "root": "ClaimAddress",
      "preUpdateProcessor": {
        "typeName": "gw.api.modules.rest.framework.v1.updater.processor.AddressPreUpdateProcessor"
      },
      "properties": {
        "addressLine1": {
          "path": "ClaimAddress.Address.AddressLine1",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('addressLine1', srcJson)"
        },
        "addressLine2": {
          "path": "ClaimAddress.Address.AddressLine2",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('addressLine2', srcJson)"
        },
        "addressLine3": {
          "path": "ClaimAddress.Address.AddressLine3",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('addressLine3', srcJson)"
        },
        // Hong Kong - Kowloon or New Territories
        "area": {
          "path": "ClaimAddress.Address.State",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('area', srcJson)",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "city": {
          "path": "ClaimAddress.Address.City"
        },
        "country": {
          "path": "ClaimAddress.Address.Country"
        },
        "county": {
          "path": "ClaimAddress.Address.County",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('county', srcJson)"
        },
        // Columbia
        "department": {
          "path": "ClaimAddress.Address.State",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('department', srcJson)",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        // United Arab Emirates
        "emirate": {
          "path": "ClaimAddress.Address.State",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('emirate', srcJson)",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "island": {
          "path": "ClaimAddress.Address.State",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('island', srcJson)",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        //Russia
        "oblast": {
          "path": "ClaimAddress.Address.State",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('oblast', srcJson)",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        // Jamaica and Barbados
        "parish": {
          "path": "ClaimAddress.Address.State",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('parish', srcJson)",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "postalCode": {
          "path": "ClaimAddress.Address.PostalCode",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('postalCode', srcJson)"
        },
        //Japan
        "prefecture": {
          "path": "ClaimAddress.Address.State",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('prefecture', srcJson)",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "province": {
          "path": "ClaimAddress.Address.State",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('province', srcJson)",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "state": {
          "path": "ClaimAddress.Address.State",
          "allowed": "ClaimAddress.Address.RestV1_validateInputField('state', srcJson)",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "ClaimContact": {
      "schemaDefinition": "ClaimContact",
      "root": "entity.ClaimContact",
      "properties": {
        "addressBookUID": {
          "path": "ClaimContact.Contact.AddressBookUID"
        },
        "cellPhone": {
          "path": "(ClaimContact.Contact as Person).RestV1_CellPhone",
          "setter": "ClaimContact.Contact.RestV1_setPhoneNumber(Person#CellPhone, value)",
          "valueResolver": {
            "typeName": "PhoneNumberResolver"
          }
        },
        "companyName": {
          "path": "ClaimContact.Contact.Name"
        },
        "contactSubtype": {
          // This field is ignored, but is present in order to trigger createOnly validation of the field
          "ignore": "true"
        },
        "dateOfBirth": {
          "path": "(ClaimContact.Contact as Person).DateOfBirth",
          "valueResolver": {
            "typeName": "gw.rest.pl.framework.v1.updater.resolver.LocalDateValueResolver"
          }
        },
        "editableRoles": {
          "path": "ClaimContact.RestV1_EditableRoles",
          "items": {
            "add": "ClaimContact.addToRoles(value)",
            "create": "new ClaimContactRole(ClaimContact)",
            "remove": "ClaimContact.removeFromRoles(value)",
            "jsonKey": "new ClaimContactRoleKey(jsonValue)",
            "valueKey": "new ClaimContactRoleKey(value)",
            "updaterRef": "#/updaters/ClaimContactRole"
          },
          "preUpdateValidators": [
            {
              "typeName": "gw.rest.core.cc.claim.v1.claims.contacts.EditableRolesValidator"
            }
          ],
          "postUpdateValidators": [
            {
              "typeName": "gw.rest.core.cc.claim.v1.roleconstraints.RoleConstraintValidator"
            }
          ]
        },
        "emailAddress1": {
          "path": "ClaimContact.Contact.EmailAddress1"
        },
        "emailAddress2": {
          "path": "ClaimContact.Contact.EmailAddress2"
        },
        "firstName": {
          "path": "(ClaimContact.Contact as Person).FirstName"
        },
        "homePhone": {
          "path": "ClaimContact.Contact.RestV1_HomePhone",
          "setter": "ClaimContact.Contact.RestV1_setPhoneNumber(Contact#HomePhone, value)",
          "valueResolver": {
            "typeName": "PhoneNumberResolver"
          }
        },
        "lastName": {
          "path": "(ClaimContact.Contact as Person).LastName"
        },
        "policySystemId": {
          "ignore": "true"
        },
        "primaryAddress": {
          "path": "ClaimContact.Contact.PrimaryAddress",
          "create": "new Address(ClaimContact)",
          "touchParent": "currentValue.Changed",
          "updaterRef": "#/updaters/Address"
        },
        "primaryLanguage": {
          "path": "ClaimContact.Contact.PrimaryLanguage",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "primaryLocale": {
          "path": "ClaimContact.Contact.PrimaryLocale",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "primaryPhoneType": {
          "path": "ClaimContact.Contact.PrimaryPhone",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "taxId": {
          "path": "ClaimContact.Contact.TaxID"
        },
        "workPhone": {
          "path": "ClaimContact.Contact.RestV1_WorkPhone",
          "setter": "ClaimContact.Contact.RestV1_setPhoneNumber(Contact#WorkPhone, value)",
          "valueResolver": {
            "typeName": "PhoneNumberResolver"
          }
        }
      }
    },
    "ClaimSearch": {
      "schemaDefinition": "ClaimSearchRequestAttributes",
      "root": "entity.ClaimSearchCriteria",
      "properties": {
        "claimNumber": {
          "path": "ClaimSearchCriteria.ClaimNumber"
        },
        "firstName": {
          "path": "ClaimSearchCriteria.NameCriteria.FirstName"
        },
        "lastName": {
          "path": "ClaimSearchCriteria.NameCriteria.LastName"
        },
        "nameSearchType": {
          "path": "ClaimSearchCriteria.NameSearchType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "policyNumber": {
          "path": "ClaimSearchCriteria.PolicyNumber"
        }
      }
    },
    "ClaimSearchV2": {
      "schemaDefinition": "ClaimSearchV2Attributes",
      "root": "entity.ClaimSearchCriteria",
      "properties": {
        "claimNumber": {
          "path": "ClaimSearchCriteria.ClaimNumber"
        },
        "companyName": {
          "path": "ClaimSearchCriteria.NameCriteria.CompanyName"
        },
        "firstName": {
          "path": "ClaimSearchCriteria.NameCriteria.FirstName"
        },
        "lastName": {
          "path": "ClaimSearchCriteria.NameCriteria.LastName"
        },
        "nameSearchType": {
          "path": "ClaimSearchCriteria.NameSearchType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "policyNumber": {
          "path": "ClaimSearchCriteria.PolicyNumber"
        },
        "taxId": {
          "path": "ClaimSearchCriteria.NameCriteria.TaxId"
        }
      }
    },
    "ClaimSolrSearch": {
      "schemaDefinition": "ClaimSolrSearchRequestAttributes",
      "root": "entity.ClaimSearchCriteria",
      "properties": {
        "address": {
          "path": "ClaimSearchCriteria.AddressCriteria",
          "create": "new Address(ClaimSearchCriteria)",
          "updaterRef": "#/updaters/Address"
        },
        "name": {
          "path": "ClaimSearchCriteria.NameCriteria.Name"
        },
        "nameSearchType": {
          "path": "ClaimSearchCriteria.FreeTextNameSearchType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "phoneNumber": {
          "path": "ClaimSearchCriteria.NameCriteria.Phone"
        }
      }
    },
    "ClaimVehicle": {
      "schemaDefinition": "Vehicle",
      "root": "gw.rest.core.cc.claim.v1.claims.vehicles.ClaimVehicle",
      "properties": {
        "color": {
          "path": "ClaimVehicle.Vehicle.Color"
        },
        "licensePlate": {
          "path": "ClaimVehicle.Vehicle.LicensePlate"
        },
        "make": {
          "path": "ClaimVehicle.Vehicle.Make"
        },
        "manufacturer": {
          "path": "ClaimVehicle.Vehicle.Manufacturer",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "model": {
          "path": "ClaimVehicle.Vehicle.Model"
        },
        "policySystemId": {
          "ignore": "true"
        },
        "state": {
          "path": "ClaimVehicle.Vehicle.State",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "style": {
          "path": "ClaimVehicle.Vehicle.Style",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "vin": {
          "path": "ClaimVehicle.Vehicle.Vin"
        },
        "year": {
          "path": "ClaimVehicle.Vehicle.Year"
        }
      }
    },
    "CovTerm": {
      "schemaDefinition": "CovTerm",
      "root": "entity.CovTerm",
      "properties": {
        "code": {
          "path": "(CovTerm as ClassificationCovTerm).Code"
        },
        "covTermSubtype": {
          "ignore": "true"
        },
        "description": {
          "path": "(CovTerm as ClassificationCovTerm).Description"
        },
        "financialAmount": {
          "path": "(CovTerm as FinancialCovTerm).FinancialAmount",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "numericValue": {
          "path": "(CovTerm as NumericCovTerm).NumericValue"
        },
        "units": {
          "path": "(CovTerm as NumericCovTerm).Units",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "Coverage": {
      "schemaDefinition": "Coverage",
      "root": "entity.Coverage",
      "properties": {
        "claimAggLimit": {
          "path": "(Coverage as VehicleCoverage).ClaimAggLimit",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "coinsurance": {
          "path": "(Coverage as PropertyCoverage).Coinsurance"
        },
        "covTerms": {
          "path": "Coverage.CovTerms",
          "items": {
            "add": "Coverage.addToCovTerms(value)",
            "create": "Coverage.RestV1.createCovTerm(jsonValue)",
            "validateCreate": "jsonValue.containsKey('id') ? 'CovTerm id ' + jsonValue.get('id') + ' is invalid, since it must match an existing one, or it must be null' : null",
            "remove": "Coverage.removeFromCovTerms(value)",
            "jsonKey": "jsonValue.get('id')",
            "valueKey": "value.RestId",
            "updaterRef": "#/updaters/CovTerm"
          }
        },
        "coverageBasis": {
          "path": "(Coverage as PropertyCoverage).CoverageBasis",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "coverageType": {
          "path": "Coverage.Type",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "currency": {
          "path": "Coverage.Currency",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "effectiveDate": {
          "path": "Coverage.EffectiveDate"
        },
        "expirationDate": {
          "path": "Coverage.ExpirationDate"
        },
        "exposureLimit": {
          "path": "Coverage.ExposureLimit",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "incidentLimit": {
          "path": "Coverage.IncidentLimit",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "limitsIndicator": {
          "path": "Coverage.LimitsIndicator",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "nonmedAggLimit": {
          "path": "(Coverage as VehicleCoverage).NonmedAggLimit",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "notes": {
          "path": "Coverage.Notes"
        },
        "personAggLimit": {
          "path": "(Coverage as VehicleCoverage).PersonAggLimit",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "replaceAggLimit": {
          "path": "(Coverage as VehicleCoverage).ReplaceAggLimit",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "state": {
          "path": "Coverage.State",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "Exposure": {
      "schemaDefinition": "Exposure",
      "root": "entity.Exposure",
      "properties": {
        "autopilotStatus": {
          "path": "Exposure.AutopilotStatus",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "claimOrder": {
          "path": "Exposure.ClaimOrder"
        },
        "claimantType": {
          "path": "Exposure.ClaimantType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "contactPermitted": {
          "path": "Exposure.ContactPermitted"
        },
        "coverage": {
          "path": "Exposure.Coverage",
          "valueResolver": {
            "typeName": "CoverageJsonValueResolver"
          }
        },
        "coverageSubtype": {
          //Handled during creation. Uneditable.
          "ignore": "true"
        },
        "fixedPropertyIncident": {
          "path": "Exposure.FixedPropertyIncident",
          "allowed": "Exposure.RestV1.incidentTypeAllowedMessage('FixedPropertyIncident')",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.fixedpropertyincidents.FixedPropertyIncidentJsonValueResolver"
          }
        },
        "injuryIncident": {
          "path": "Exposure.InjuryIncident",
          "allowed": "Exposure.RestV1.incidentTypeAllowedMessage('InjuryIncident')",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.injuryincidents.InjuryIncidentJsonValueResolver"
          }
        },
        "jurisdiction": {
          "path": "Exposure.JurisdictionState",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "lossCategory": {
          "path": "Exposure.LossCategory",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "lossParty": {
          "path": "Exposure.LossParty",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "otherCoverage": {
          "path": "Exposure.OtherCoverage"
        },
        "otherStructureIncident": {
          "path": "Exposure.OtherStructureIncident",
          "allowed": "Exposure.RestV1.incidentTypeAllowedMessage('OtherStructureIncident')",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.otherstructureincidents.OtherStructureIncidentJsonValueResolver"
          }
        },
        "primaryCoverage": {
          //Handled during creation. Uneditable.
          "ignore": "true"
        },
        "progress": {
          "path": "Exposure.Progress",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "propertyContentsIncident": {
          "path": "Exposure.PropertyContentsIncident",
          "allowed": "Exposure.RestV1.incidentTypeAllowedMessage('PropertyContentsIncident')",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.propertycontentsincidents.PropertyContentsIncidentJsonValueResolver"
          }
        },
        "securityLevel": {
          "path": "Exposure.SecurityLevel",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "segment": {
          "path": "Exposure.Segment",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "strategy": {
          "path": "Exposure.Strategy",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "tier": {
          "path": "Exposure.ExposureTier",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "vehicleIncident": {
          "path": "Exposure.VehicleIncident",
          "allowed": "Exposure.RestV1.incidentTypeAllowedMessage('VehicleIncident')",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.vehicleincidents.VehicleIncidentJsonValueResolver"
          }
        }
      }
    },
    "FixedPropertyIncident": {
      "schemaDefinition": "FixedPropertyIncident",
      "root": "entity.FixedPropertyIncident",
      "properties": {
        "automationPath": {
          "path": "FixedPropertyIncident.AutomationPath",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "description": {
          "path": "FixedPropertyIncident.Description"
        },
        "location": {
          "path": "FixedPropertyIncident.Property",
          "create": "new PolicyLocation(FixedPropertyIncident)",
          "handler": "PolicyObjectSemiSharedPropertyUpdateHandler",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.property.v1.claims.PolicyLocationJsonValueResolver"
          },
          "shouldCreate": "currentValue == null || currentValue.Policy != null",
          "touchParent": "currentValue.Changed",
          "updaterRef": "#/updaters/Location"
        },
        "lossParty": {
          "path": "FixedPropertyIncident.LossParty",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "occupancyType": {
          "path": "FixedPropertyIncident.OccupancyType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "severity": {
          "path": "FixedPropertyIncident.Severity",
          "postUpdateValidators": [
            {
              "typeName": "ExplicitlyFilteredTypekeyPostUpdateValidator",
              "categories": "new gw.entity.TypeKey[]{FixedPropertyIncident.Subtype}"
            }
          ],
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "InjuryBodyPart": {
      "schemaDefinition": "InjuryBodyPart",
      "root": "entity.BodyPartDetails",
      "properties": {
        "detailedBodyPart": {
          "path": "BodyPartDetails.DetailedBodyPart",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "detailedBodyPartDesc": {
          "path": "BodyPartDetails.DetailedBodyPartDesc",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "impairmentPercentage": {
          "path": "BodyPartDetails.ImpairmentPercentage"
        },
        "ordering": {
          "path": "BodyPartDetails.Ordering"
        },
        "primaryBodyPart": {
          "path": "BodyPartDetails.PrimaryBodyPart",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "sideOfBody": {
          "path": "BodyPartDetails.SideOfBody",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "InjuryIncident": {
      "schemaDefinition": "InjuryIncident",
      "root": "entity.InjuryIncident",
      "properties": {
        "ambulanceUsed": {
          "path": "InjuryIncident.AmbulanceUsed"
        },
        "automationPath": {
          "path": "InjuryIncident.AutomationPath",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "bodyParts": {
          "path": "InjuryIncident.BodyParts",
          "items": {
            "create": "InjuryIncident.newBodyPart()",
            "validateCreate": "InjuryIncident.RestV1_ValidateNewInjuryBodyPartJson(jsonValue)",
            "remove": "InjuryIncident.removeFromBodyParts(value)",
            "jsonKey": "jsonValue.get('id')",
            "valueKey": "value.RestId",
            "updaterRef": "#/updaters/InjuryBodyPart"
          }
        },
        "dateOfDeath": {
          "path": "InjuryIncident.DateOfDeath"
        },
        "description": {
          "path": "InjuryIncident.Description"
        },
        "detailedInjuryType": {
          "path": "InjuryIncident.DetailedInjuryType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "disabledDueToAccident": {
          "path": "InjuryIncident.DisabledDueToAccident",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "generalInjuryType": {
          "path": "InjuryIncident.GeneralInjuryType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "lossParty": {
          "path": "InjuryIncident.LossParty",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "lostWages": {
          "path": "InjuryIncident.LostWages"
        },
        "severity": {
          "path": "InjuryIncident.Severity",
          "postUpdateValidators": [
            {
              "typeName": "ExplicitlyFilteredTypekeyPostUpdateValidator",
              "categories": "new gw.entity.TypeKey[]{InjuryIncident.Subtype}"
            }
          ],
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "treatmentType": {
          "path": "InjuryIncident.MedicalTreatmentType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "IntakeInteraction": {
      "schemaDefinition": "IntakeInteraction",
      "root": "entity.IntakeInteraction",
      "properties": {
        "claimContact": {
          "path": "IntakeInteraction.Contact",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.contacts.ClaimContactJsonValueResolver"
          }
        },
        "claimSnapshotURL": {
          "path": "IntakeInteraction.ClaimSnapshotURL"
        },
        "description": {
          "path": "IntakeInteraction.Description"
        },
        "intakeId": {
          "path": "IntakeInteraction.IntakeId"
        },
        "intakeInputs": {
          "path": "IntakeInteraction.IntakeInputsJson"
        },
        "intakeResults": {
          "path": "IntakeInteraction.IntakeResultsJson"
        },
        "relatedEntity": {
          "path": "IntakeInteraction.RelatedEntity",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.autopilot.RelatedEntityJsonValueResolver"
          }
        },
        "status": {
          "path": "IntakeInteraction.Status",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "Location": {
      "schemaDefinition": "PolicyLocation",
      "root": "entity.PolicyLocation",
      "properties": {
        "address": {
          "path": "PolicyLocation.RestV1.PolicyLocationAddress",
          "create": "new ClaimAddress(new Address(PolicyLocation), null as Claim)",
          "shouldCreate": "currentValue == null || currentValue.PolicyAddress",
          "touchParent": "currentValue.Address.Changed",
          "updaterRef": "#/updaters/ClaimAddress"
        },
        "locationNumber": {
          "path": "PolicyLocation.LocationNumber"
        },
        "notes": {
          "path": "PolicyLocation.Notes"
        },
        "primaryLocation": {
          "path": "PolicyLocation.PrimaryLocation"
        }
      }
    },
    "OtherStructureIncident": {
      "schemaDefinition": "OtherStructureIncident",
      "root": "entity.OtherStructureIncident",
      "properties": {
        "description": {
          "path": "OtherStructureIncident.Description"
        },
        "fencesDamaged": {
          "path": "OtherStructureIncident.FencesDamaged"
        },
        "lossParty": {
          "path": "OtherStructureIncident.LossParty",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "severity": {
          "path": "OtherStructureIncident.Severity",
          "postUpdateValidators": [
            {
              "typeName": "ExplicitlyFilteredTypekeyPostUpdateValidator",
              "categories": "new gw.entity.TypeKey[]{OtherStructureIncident.Subtype}"
            }
          ],
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "Payee": {
      "schemaDefinition": "Payee",
      "root": "entity.CheckPayee",
      "properties": {
        "contact": {
          "path": "CheckPayee.Payee",
          "valueResolver": {
            "typeName": "ClaimContactJsonValueResolver",
            "claimPath": "CheckPayee.Check.Claim",
            "createClaimContact": true
          }
        },
        "payeeType": {
          "path": "CheckPayee.PayeeType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "Policy": {
      "schemaDefinition": "Policy",
      "root": "entity.Policy",
      "properties": {
        "accountNumber": {
          "path": "Policy.AccountNumber"
        },
        "assignedRisk": {
          "path": "Policy.AssignedRisk"
        },
        "cancellationDate": {
          "path": "Policy.CancellationDate"
        },
        "currency": {
          "path": "Policy.Currency",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "effectiveDate": {
          "path": "Policy.EffectiveDate"
        },
        "expirationDate": {
          "path": "Policy.ExpirationDate"
        },
        "financialInterests": {
          "path": "Policy.FinancialInterests"
        },
        "foreignCoverage": {
          "path": "Policy.ForeignCoverage"
        },
        "notes": {
          "path": "Policy.Notes"
        },
        "originalEffectiveDate": {
          "path": "Policy.OrigEffectiveDate"
        },
        "policyNumber": {
          "path": "Policy.PolicyNumber"
        },
        "policyType": {
          "path": "Policy.PolicyType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "producerCode": {
          "path": "Policy.ProducerCode"
        },
        "serviceTier": {
          "path": "Policy.CustomerServiceTier",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "status": {
          "path": "Policy.Status",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "underwritingCo": {
          "path": "Policy.UnderwritingCo",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "underwritingGroup": {
          "path": "Policy.UnderwritingGroup",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "PropertyContentsIncident": {
      "schemaDefinition": "PropertyContentsIncident",
      "root": "entity.PropertyContentsIncident",
      "properties": {
        "description": {
          "path": "PropertyContentsIncident.Description"
        },
        "location": {
          "path": "PropertyContentsIncident.PropertyLocation",
          "create": "new PolicyLocation(PropertyContentsIncident)",
          "handler": "PolicyObjectSemiSharedPropertyUpdateHandler",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.property.v1.claims.PolicyLocationJsonValueResolver"
          },
          "shouldCreate": "currentValue == null || currentValue.Policy != null",
          "touchParent": "currentValue.Changed",
          "updaterRef": "#/updaters/Location"
        },
        "lossParty": {
          "path": "PropertyContentsIncident.LossParty",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "severity": {
          "path": "PropertyContentsIncident.Severity",
          "postUpdateValidators": [
            {
              "typeName": "ExplicitlyFilteredTypekeyPostUpdateValidator",
              "categories": "new gw.entity.TypeKey[]{PropertyContentsIncident.Subtype}"
            }
          ],
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "RecoveryReserveSet": {
      "schemaDefinition": "RecoveryReserveSet",
      "root": "entity.RecoveryReserveSet",
      "properties": {
        "createdVia": {
          "path": "RecoveryReserveSet.CreatedVia",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "recoveryReservesToWrite": {
          "path": "RecoveryReserveSet.RecoveryReserves",
          "items": {
            "add": "RecoveryReserveSet.addToRecoveryReserves(value)",
            "create": "RecoveryReserveSetRestMethods.createRecoveryReserve(RecoveryReserveSet, jsonValue)",
            "validateCreate": "jsonValue.containsKey('id') ? 'The id ' + jsonValue.get('id') + ' did not match any existing recovery reserve' : null",
            "jsonKey": "jsonValue.get('id')",
            "valueKey": "value.RestId",
            "updaterRef": "#/updaters/Transaction"
          }
        }
      }
    },
    "RecoverySet": {
      "schemaDefinition": "RecoverySet",
      "root": "entity.RecoverySet",
      "properties": {
        "createdVia": {
          "path": "RecoverySet.CreatedVia",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "recoveriesToWrite": {
          "path": "RecoverySet.Recoveries",
          "items": {
            "add": "RecoverySet.addToRecoveries(value)",
            "create": "RecoverySetRestMethods.createRecovery(RecoverySet, jsonValue)",
            "validateCreate": "jsonValue.containsKey('id') ? 'The id ' + jsonValue.get('id') + ' did not match any existing recovery' : null",
            "jsonKey": "jsonValue.get('id')",
            "valueKey": "value.RestId",
            "updaterRef": "#/updaters/Transaction"
          }
        }
      }
    },
    "ReserveSet": {
      "schemaDefinition": "ReserveSet",
      "root": "entity.ReserveSet",
      "properties": {
        "createdVia": {
          "path": "ReserveSet.CreatedVia",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "reservesToWrite": {
          "path": "ReserveSet.Reserves",
          "items": {
            "add": "ReserveSet.addToReserves(value)",
            "create": "ReserveSetRestMethods.createReserve(ReserveSet, jsonValue)",
            "validateCreate": "jsonValue.containsKey('id') ? 'The id ' + jsonValue.get('id') + ' did not match any existing reserve' : null",
            "jsonKey": "jsonValue.get('id')",
            "valueKey": "value.RestId",
            "updaterRef": "#/updaters/Transaction"
          }
        }
      }
    },
    "ServiceRequest": {
      "schemaDefinition": "ServiceRequest",
      "root": "entity.ServiceRequest",
      "properties": {
        "exposure": {
          "path": "ServiceRequest.ExposureGw",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.exposures.ExposureJsonValueResolver"
          }
        },
        "incident": {
          "path": "ServiceRequest.IncidentGw",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.GenericIncidentJsonValueResolver"
          }
        },
        "instruction": {
          "path": "ServiceRequest.Instruction",
          "create": "ServiceRequest.RestV1.createInstruction()",
          "postUpdateValidators": [
            {
              "typeName": "gw.rest.core.cc.claim.v1.servicerequests.ServiceRequestInstructionPostUpdateValidator"
            }
          ],
          "updaterRef": "#/updaters/ServiceRequestInstruction"
        },
        "kind": {
          "path": "ServiceRequest.Kind",
          "preUpdateValidators": [
            {
              "typeName": "gw.rest.core.cc.claim.v1.servicerequests.ServiceRequestKindPreUpdateValidator"
            }
          ],
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "progress": {
          "path": "ServiceRequest.Progress",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "referenceNumber": {
          "path": "ServiceRequest.ServiceRequestReferenceNumberGw"
        },
        "requestedQuoteCompletionDate": {
          "path": "ServiceRequest.RequestedQuoteCompletionDateGw",
          "valueResolver": {
            "typeName": "gw.rest.pl.framework.v1.updater.resolver.LocalDateValueResolver"
          }
        },
        "requestedQuoteCompletionDateTime": {
          "path": "ServiceRequest.RequestedQuoteCompletionDateGw"
        },
        "requestedServiceCompletionDate": {
          "path": "ServiceRequest.RequestedServiceCompletionDateGw",
          "valueResolver": {
            "typeName": "gw.rest.pl.framework.v1.updater.resolver.LocalDateValueResolver"
          }
        },
        "requestedServiceCompletionDateTime": {
          "path": "ServiceRequest.RequestedServiceCompletionDateGw"
        },
        "specialist": {
          "path": "ServiceRequest.Specialist",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.contacts.ClaimContactJsonValueResolver"
          }
        },
        "specialistCommMethod": {
          "path": "ServiceRequest.SpecialistCommMethodGw",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "tier": {
          "path": "ServiceRequest.Tier",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "ServiceRequestInstruction": {
      "schemaDefinition": "ServiceRequestInstruction",
      "root": "entity.ServiceRequestInstruction",
      "properties": {
        "customer": {
          "path": "ServiceRequestInstruction.CustomerContactGw",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.contacts.ClaimContactJsonValueResolver",
            "claimPath": "ServiceRequestInstruction.ServiceRequest.Claim"
          }
        },
        "instructionText": {
          "path": "ServiceRequestInstruction.InstructionTextGw"
        },
        "serviceAddress": {
          "path": "ServiceRequestInstruction.RestV1.ServiceAddressWrapper",
          "create": "new ClaimAddress(new Address(ServiceRequestInstruction), ServiceRequestInstruction.ServiceRequest.Claim)",
          "handler": "SemiSharedPropertyUpdateHandler",
          "valueResolver": {
            "typeName": "ClaimAddressJsonValueResolver",
            "claimPath": "ServiceRequestInstruction.ServiceRequest.Claim"
          },
          "shouldCreate": "currentValue == null || currentValue.PolicyAddress",
          "touchParent": "currentValue.Address.Changed",
          "updaterRef": "#/updaters/ClaimAddress"
        },
        "services": {
          "path": "ServiceRequestInstruction.Services*.Service",
          "items": {
            "add": "ServiceRequestInstruction.addToServices(new ServiceRequestInstructionService(ServiceRequestInstruction) { :Service = value })",
            "valueResolver": {
              "typeName": "gw.rest.core.cc.claim.v1.servicerequests.specialists.SpecialistServiceJsonValueResolver"
            }
          }
        }
      }
    },
    "ServiceRequestInvoiceOperationContext": {
      "schemaDefinition": "ServiceRequestInvoiceOperationContext",
      "root": "gw.core.vendormanagement.servicerequeststate.ServiceRequestInvoiceOperationContext",
      "properties": {
        "reason": {
          "path": "ServiceRequestInvoiceOperationContext.Reason"
        }
      }
    },
    "ServiceRequestInvoicePayInfo": {
      "schemaDefinition": "ServiceRequestInvoicePayInfo",
      "root": "gw.rest.core.cc.claim.v1.servicerequests.invoices.ServiceRequestInvoicePayInfo",
      "properties": {
        "check": {
          "path": "ServiceRequestInvoicePayInfo.Check",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.transactions.CheckJsonValueResolver"
          }
        },
        "operationContext": {
          "path": "ServiceRequestInvoicePayInfo.OperationContext",
          "create": "ServiceRequestInvoicePayInfo.OperationContext",
          "updaterRef": "#/updaters/ServiceRequestInvoiceOperationContext"
        }
      }
    },
    "ServiceRequestOperationContext": {
      "schemaDefinition": "ServiceRequestOperationContext",
      "root": "gw.core.vendormanagement.servicerequeststate.ServiceRequestOperationContext",
      "properties": {
        "expectedCompletionDate": {
          "path": "ServiceRequestOperationContext.ExpectedCompletionDate"
        },
        "originalDate": {
          "path": "ServiceRequestOperationContext.OriginalDate"
        },
        "reason": {
          "path": "ServiceRequestOperationContext.Reason"
        },
        "requestedCompletionDate": {
          "path": "ServiceRequestOperationContext.RequestedCompletionDate"
        },
        "statement": {
          "path": "ServiceRequestOperationContext.Statement",
          "create": "ServiceRequestOperationContext.Statement",
          "shouldCreate": "ServiceRequestOperationContext.Statement.New",
          "updaterRef": "#/updaters/ServiceRequestStatement"
        }
      }
    },
    "ServiceRequestSimpleOperationContext": {
      "schemaDefinition": "ServiceRequestSimpleOperationContext",
      "root": "gw.core.vendormanagement.servicerequeststate.ServiceRequestOperationContext",
      "properties": { }
    },
    "ServiceRequestStatement": {
      "schemaDefinition": "ServiceRequestStatement",
      "root": "entity.ServiceRequestStatement",
      "properties": {
        "description": {
          "path": "ServiceRequestStatement.Description"
        },
        "expectedDaysToPerformService": {
          "path": "(ServiceRequestStatement as ServiceRequestQuote).ExpectedDaysToPerformService"
        },
        "lineItems": {
          "path": "ServiceRequestStatement.LineItems",
          "items": {
            "add": "ServiceRequestStatement.addToLineItems(value)",
            "create": "new ServiceRequestStatementLineItem(ServiceRequestStatement)",
            "updaterRef": "#/updaters/ServiceRequestStatementLineItem"
          }
        },
        "paymentDate": {
          "path": "(ServiceRequestStatement as ServiceRequestInvoice).PaymentDate",
          "valueResolver": {
            "typeName": "gw.rest.pl.framework.v1.updater.resolver.LocalDateValueResolver"
          }
        },
        "paymentDateTime": {
          "path": "(ServiceRequestStatement as ServiceRequestInvoice).PaymentDate"
        },
        "referenceNumber": {
          "path": "ServiceRequestStatement.ReferenceNumber"
        },
        "source": {
          "path": "ServiceRequestStatement.Source",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "status": {
          "path": "(ServiceRequestStatement as ServiceRequestInvoice).Status",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "ServiceRequestStatementLineItem": {
      "schemaDefinition": "ServiceRequestStatementLineItem",
      "root": "entity.ServiceRequestStatementLineItem",
      "properties": {
        "amount": {
          "path": "ServiceRequestStatementLineItem.Amount",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "category": {
          "path": "ServiceRequestStatementLineItem.Category",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "description": {
          "path": "ServiceRequestStatementLineItem.Description"
        }
      }
    },
    "Transaction": {
      "schemaDefinition": "Transaction",
      "root": "entity.Transaction",
      "updateFirst": [
        "currency",
        "reserveLine",
        "transToReservingExchangeRate",
        "lineItems"
      ],
      "properties": {
        "comments": {
          "path": "Transaction.Comments"
        },
        "currency": {
          "path": "Transaction.Currency",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "eroding": {
          "path": "(Transaction as Payment).ErodesReserves"
        },
        "lineItems": {
          "path": "Transaction.LineItems",
          "items": {
            "add": "Transaction.addToLineItems(value)",
            "create": "new TransactionLineItem(Transaction)",
            "validateCreate": "Transaction.RestV1.validateNewLineItemJson(jsonValue)",
            "remove": "Transaction.removeFromLineItems(value)",
            "jsonKey": "jsonValue.get('id')",
            "valueKey": "value.RestId",
            "updaterRef": "#/updaters/TransactionLineItem"
          },
          "preUpdateValidators": [
            {
              "typeName": "gw.rest.core.cc.claim.v1.claims.transactions.TransactionLineItemPreUpdateValidator"
            }
          ]
        },
        "paymentType": {
          "path": "(Transaction as Payment).PaymentType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "reserveLine": {
          "path": "Transaction",
          "setter": "",
          "create": "Transaction",
          "shouldCreate": "currentValue.New",
          "updaterRef": "#/updaters/TransactionCoding"
        },
        "transToReservingExchangeRate": {
          "path": "Transaction.TransToReservingExchangeRate",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.transactions.ExchangeRateJsonValueResolver"
          }
        }
      }
    },
    "TransactionCoding": {
      "schemaDefinition": "TransactionCoding",
      "root": "entity.Transaction",
      "properties": {
        "costCategory": {
          "path": "Transaction.CostCategory",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "costType": {
          "path": "Transaction.CostType",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "exposure": {
          "path": "Transaction.Exposure",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.exposures.ExposureJsonValueResolver",
            "claimPath": "Transaction.Claim"
          }
        },
        "recoveryCategory": {
          "path": "Transaction.RestV1.RecoveryCategory",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "reservingCurrency": {
          "path": "Transaction.ReservingCurrency",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        }
      }
    },
    "TransactionLineItem": {
      "schemaDefinition": "TransactionLineItem",
      "root": "entity.TransactionLineItem",
      "updateFirst": [
        "transactionAmount",
        "claimAmount",
        "reservingAmount",
        "reportingAmount"
      ],
      "properties": {
        "claimAmount": {
          "path": "TransactionLineItem.ClaimAmount",
          "setter": "TransactionLineItemRestMethods.setClaimAmount(TransactionLineItem, value)",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "comments": {
          "path": "TransactionLineItem.Comments"
        },
        "lineCategory": {
          "path": "TransactionLineItem.LineCategory",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "reportingAmount": {
          "path": "TransactionLineItem.ReportingAmount",
          "setter": "TransactionLineItemRestMethods.setReportingAmount(TransactionLineItem, value)",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "reservingAmount": {
          "path": "TransactionLineItem.ReservingAmount",
          "setter": "TransactionLineItemRestMethods.setReservingAmount(TransactionLineItem, value)",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "transactionAmount": {
          "path": "TransactionLineItem.TransactionAmount",
          "setter": "TransactionLineItem.setTransactionAmountAndUpdate(value)",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        }
      }
    },
    "UnverifiedPolicyLocation": {
      "schemaDefinition": "UnverifiedPolicyLocation",
      "root": "entity.PolicyLocation",
      "properties": {
        "address": {
          "path": "PolicyLocation.Address",
          "setter": "",
          "create": "PolicyLocation.Address",
          "shouldCreate": "PolicyLocation.New",
          "updaterRef": "#/updaters/Address"
        },
        "locationNumber": {
          "path": "PolicyLocation.LocationNumber"
        },
        "notes": {
          "path": "PolicyLocation.Notes"
        },
        "primaryLocation": {
          "path": "PolicyLocation.PrimaryLocation"
        }
      }
    },
    "VehicleIncident": {
      "schemaDefinition": "VehicleIncident",
      "root": "entity.VehicleIncident",
      "properties": {
        "automationPath": {
          "path": "VehicleIncident.AutomationPath",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "childSafetySeatStatus": {
          "path": "VehicleIncident.ChildSafetySeatStatus",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "damageDescription": {
          "path": "VehicleIncident.Description"
        },
        "lossParty": {
          "path": "VehicleIncident.LossParty",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "propertyValue": {
          "path": "VehicleIncident.PropertyValue",
          "valueResolver": {
            "typeName": "CurrencyAmountValueResolver"
          }
        },
        "severity": {
          "path": "VehicleIncident.Severity",
          "postUpdateValidators": [
            {
              "typeName": "ExplicitlyFilteredTypekeyPostUpdateValidator",
              "categories": "new gw.entity.TypeKey[]{VehicleIncident.Subtype}"
            }
          ],
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "valuationRequired": {
          "path": "VehicleIncident.ValuationRequired",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "valuationSource": {
          "path": "VehicleIncident.ValuationSource",
          "valueResolver": {
            "typeName": "TypeKeyValueResolver"
          }
        },
        "vehicle": {
          "path": "VehicleIncident.RestV1.VehicleWrapper",
          "create": "new gw.rest.core.cc.claim.v1.claims.vehicles.ClaimVehicle(new Vehicle(VehicleIncident))",
          "handler": "PolicyObjectSemiSharedPropertyUpdateHandler",
          "valueResolver": {
            "typeName": "gw.rest.core.cc.claim.v1.claims.vehicleincidents.VehicleJsonValueResolver"
          },
          "shouldCreate": "currentValue == null || currentValue.PolicyVehicle",
          "touchParent": "currentValue.Vehicle.Changed",
          "updaterRef": "#/updaters/ClaimVehicle"
        }
      }
    }
  }
}